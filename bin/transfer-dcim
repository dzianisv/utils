#!/bin/bash

set -ueo pipefail

MEDIA_DIRS=("PRIVATE/M4ROOT/CLIP" "DCIM/100MSDCF")
MEDIA_EXTENSIONS=("*.MP4" "*.JPG" "*.ARW")
TMP_EXTENSIONS=("*.THM" "*.XML")

get_os() {
    case "$(uname)" in
        Darwin) echo "macos" ;;
        Linux) echo "linux" ;;
        *) echo "unknown" ;;
    esac
}

get_file_modification_time() {
    if [ "$(get_os)" = "macos" ]; then
        date -r $(stat -f %m "$1" 2>/dev/null) +"%Y-%m-%d-%H-%M-%S"
    else
        date -r $(stat -c %Y "$1" 2>/dev/null) +"%Y-%m-%d-%H-%M-%S"
    fi
}

transfer() {
    destination="$1"
    shift
    if [[ ! -f "$1" ]]; then
        echo "No files to transfer"
        return 0
    fi

    rsync -r -t -l --progress -e "ssh -o Ciphers=chacha20-poly1305@openssh.com" --remove-source-files "$@" "${destination}"
}

automount() {
    if [ "$(get_os)" = "macos" ]; then
        for device_path in $(diskutil list | grep -E '^\s*/dev/' | awk '{print $1}'); do
            mount_point=$(diskutil info "$device_path" | grep "Mount Point" | awk '{print $3}')
            if [ -z "$mount_point" ]; then
                diskutil mount "$device_path"
            fi
        done
    else
        lsblk -o PATH,MOUNTPOINT | while read -r device_path mountpoint; do
            if [ -z "$mountpoint" ]; then
                udisksctl mount -b "$device_path"
            fi
        done
    fi
}

detect_and_transfer() {
    DESTINATION=${1:?Target directory is required}

    if [[ $(get_os) = "macos" ]]; then
        mountpoints=$(find -x /Volumes -maxdepth 1 -type d -not -path "/Volumes")
    else
        mountpoints=$(lsblk -o MOUNTPOINT)
    fi

    for mountpoint in $mountpoints; do
        if [[ -d "${mountpoint}" ]]; then
            for DIR in "${MEDIA_DIRS[@]}"; do
                SRC_DIR="${mountpoint%/}/${DIR}"
                if [[ -d "${SRC_DIR}" ]]; then
                    for EXT in "${MEDIA_EXTENSIONS[@]}"; do
                        echo "Staring transfer of ${SRC_DIR}/${EXT} to ${DESTINATION}"
                        if ! transfer "${DESTINATION}" "${SRC_DIR}/"${EXT}; then
                            echo "Failed to transfer ${SRC_DIR}/${EXT}"
                        fi
                    done
                    for TMP_EXTENSION in "${TMP_EXTENSIONS[@]}"; do
                        find "${SRC_DIR}" -maxdepth 1 -type f -name "${TMP_EXTENSION}" -exec rm {} \;
                    done
                fi
            done
        fi
    done
}

detect_and_transfer "$1"
